abline(a = 0, b = 1)
test_steps[1:5, 1:5]
test_steps[1:5, 95:100]
mu <- 0.1
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
rowMeans(sc^4)
rowMeans(sc^4)/cs^4
str(sc)
?rpois
rpois(length(cs), cs*mu[1:9])
plot(dens(sc[1, ]))
plot(density(sc[1, ]))
plot(density(rpois(4000, cs[10] * means[10])))
plot(density(sc[10, ]))
?rpois
mu <- means[10]
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(density(sc[10, ]))
lines(density(rpois(4000, cs[10] * means[10])), col = 2)
plot(test_steps[1, ]/(1 + 1/N^2 - 2/N),
mu_test*ksi_3 + 7 * mu_test^2 * ksi_2 + 6 * N * mu_test^2 * ksi + N*mu_test^4)
abline(a = 0, b = 1)
(1 + 1/N^2 - 2/N)
mu_test*ksi_3 + 7 * mu_test^2 * ksi_2 + 6 * N * mu_test^2 * ksi + N*mu_test^4
str(sc)
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- max(means)
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- 0
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- 0.1
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
max(means)
mu <- means[50]
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- means[10]
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- max(means)/2
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- max(means)/10
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- max(means)/100
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- mu_test[2]
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
plot(colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, sims[4, ])
library(rlc)
lc_scatter(x = colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, y = sims[4, ], colourValue = mu_test)
closePage()
lc_scatter(dat(x = colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, y = sims[4, ], colourValue = mu_test))
plot(colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, sims[4, ])
abline(a = 0, b = 1)
cs <- colSums(rawCounts_RNA)
means <- rowMeans(normCounts)
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
#  s1 <- rep(0, nrow(sc))
#  s2 <- rep(0, nrow(sc))
#  s3 <- rep(0, nrow(sc))
#  for(j in 1:N) {
#    for(j1 in 1:N) {
#      s1 <- s1 + sc[j, ]^2 * sc[j1, ]^2 /cs[j]^2 / cs[j1]^2
#      for(j2 in 1:N) {
#        s3 <- s3 + sc[j, ]^2 * sc[j1, ] * sc[j2, ] /cs[j]^2 / cs[j1] / cs[j2]
#        for(j3 in 1:N)
#          s2 <- s2 + sc[j, ] * sc[j1, ] * sc[j2, ] * sc[j3, ] /cs[j] / cs[j1] / cs[j2] / cs[j3]
#      }
#    }
#  }
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat), mean(var_hat^2), var_hat_2)
})
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
#  var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
#  s1 <- rep(0, nrow(sc))
#  s2 <- rep(0, nrow(sc))
#  s3 <- rep(0, nrow(sc))
#  for(j in 1:N) {
#    for(j1 in 1:N) {
#      s1 <- s1 + sc[j, ]^2 * sc[j1, ]^2 /cs[j]^2 / cs[j1]^2
#      for(j2 in 1:N) {
#        s3 <- s3 + sc[j, ]^2 * sc[j1, ] * sc[j2, ] /cs[j]^2 / cs[j1] / cs[j2]
#        for(j3 in 1:N)
#          s2 <- s2 + sc[j, ] * sc[j1, ] * sc[j2, ] * sc[j3, ] /cs[j] / cs[j1] / cs[j2] / cs[j3]
#      }
#    }
#  }
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat))
})
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
#  var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
#  s1 <- rep(0, nrow(sc))
#  s2 <- rep(0, nrow(sc))
#  s3 <- rep(0, nrow(sc))
#  for(j in 1:N) {
#    for(j1 in 1:N) {
#      s1 <- s1 + sc[j, ]^2 * sc[j1, ]^2 /cs[j]^2 / cs[j1]^2
#      for(j2 in 1:N) {
#        s3 <- s3 + sc[j, ]^2 * sc[j1, ] * sc[j2, ] /cs[j]^2 / cs[j1] / cs[j2]
#        for(j3 in 1:N)
#          s2 <- s2 + sc[j, ] * sc[j1, ] * sc[j2, ] * sc[j3, ] /cs[j] / cs[j1] / cs[j2] / cs[j3]
#      }
#    }
#  }
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat))
})
mu_test <- seq(min(means), max(means), length.out = 300)
plot(mu_test, sims[1, ])
ksi <- mean(1/cs)
plot(mu_test * ksi / length(cs), sims[2, ] )
abline(a = 0, b = 1)
plot(mu_test * ksi, sims[3, ])
abline(a = 0, b = 1)
N <- length(cs)
ksi_2 <- sum(1/cs^2)
ksi_3 <- sum(1/cs^3)
est_var_var <- function(mu) {
(3/N) * mu^4 +
(9/N) * mu^3 * ksi +
(2/(N-1)^2) * mu^2 * ksi^2 +
(5*N^2 - 14 * N + 3)/N^2/(N - 1)^2 * mu^2 * ksi_2 +
1/N^2 * mu * ksi_3
}
plot(est_var_var(mu_test)/(N - 1)^2, sims[4, ])
plot(est_var_var(mu_test), sims[4, ])
sample(70, 1)
sample(3, 1)
sample(3, 1)
sample(68, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(66, 1)
sample(3, 1)
sample(64, 1)
sample(3, 1)
sample(62, 1)
sample(3, 1)
sample(60, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(58, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(12, 1)
sample(2, 1)
sample(2, 1)
sample(6, 1)
sample(58, 1)
sample(3, 1)
sample(56, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(54, 1)
sample(3, 1)
library(rlc)
data(iris)
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(x ~ y)
pred <- predict(fit, x, se.fit = T)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = y - 1.96 * pred$se.fit,
ymax = y + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), id = "ribbonTest")
debugonce(rlc:::setChart)
closePage()
lc_ribbon(dat(ymin = y - 1.96 * pred$se.fit,
ymax = y + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
debugonce(dataFun)
l
pred$se.fit
fit
closePage()
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), id = "ribbonTest")
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), size = 2, id = "ribbonTest")
lc_abLine(dat(a = fit$coefficients[2], b = fit$coefficients[1]))
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), size = 2, id = "ribbonTest")
lc_abLine(dat(a = fit$coefficients[2], b = fit$coefficients[1]), id = "ribbonTest")
closePage()
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), size = 2, id = "ribbonTest")
lc_abLine(dat(a = fit$coefficients[2], b = fit$coefficients[1]), id = "ribbonTest")
sample(20, 1)
sample(2, 1)
sample(6, 1)
sample(20, 1)
sample(2, 1)
sample(6, 1)
sample(20, 1)
sample(3, 1)
sample(2, 1)
lc_scatter(dat(x = iris$Sepal.Length,
y = iris$Petal.Length,
size = iris$Sepal.Width * 2,
colourValue = iris$Petal.Width,
strokeWidth = 3,
opacity = runif(150))
)
library(rlc)
lc_scatter(dat(x = iris$Sepal.Length,
y = iris$Petal.Length,
size = iris$Sepal.Width * 2,
colourValue = iris$Petal.Width,
strokeWidth = 3,
opacity = runif(150))
)
lc_hLine(dat(
h = 1:5,
lineWidth = 1:5 * 2,
dasharray = c("", "10", "10 2", "15 3 8", "3 6 9 12"),
domainY = c(0, 6)
))
lc_scatter(dat(
x = iris$Sepal.Length,
y = iris$Petal.Length,
size = iris$Sepal.Width * 2,
colourValue = iris$Petal.Width,
symbolValue = iris$Species,
title = "Iris dataset",
titleX = 100,
titleY = 500,
titleSize = 30,
axisTitleX = "Sepal Length",
axisTitleY = "Petal Length",
colourLegendTitle = "Petal Width",
symbolLegendTitle = "Species"
))
lc_scatter(dat(x = rnorm(10)),
y = rnorm(10))
updateCharts()
updateCharts()
updateCharts()
updateCharts()
updateCharts()
colours <- RColorBrewer::brewer.pal(10, "Set3")
selColour <- 1
lc_scatter(dat(
x = 1:10,
y = 1:10,
colour = colours[selColour],
on_click = function(i) {
print(i)
selColour <<- i
updateCharts()
}
))
RColorBrewer::brewer.pal(10, "Set3")
colours <- c(RColorBrewer::brewer.pal(10, "Set3"), "black")
selColour <- 1
lc_scatter(dat(
x = 1:10,
y = 1:10,
colour = colours[selColour],
on_mouseover = function(i) {
selColour <<- i
updateCharts()
},
on_mouseout = function() {
selColour <<- 11
updateCharts()
}
))
openPage(layout = "table1x2")
lc_scatter(dat(
x = iris$Sepal.Length,
y = iris$Petal.Length,
colourValue = iris$Species,
on_marked = function() {
mark(getMarked("A1"), "A2")
}
), "A1", width = 300, height = 300)
lc_scatter(dat(
x = iris$Sepal.Width,
y = iris$Petal.Width,
colourValue = iris$Species,
on_marked = function() {
mark(getMarked("A2"), "A1")
}
), "A2", width = 300, height = 300)
x <- rep(c("a", "b", "c"), each = 500)
y <- c(rnorm(500), rnorm(500, 3), rnorm(500, 7))
openPage(useViewer = F, layout = "table1x2")
# scatterplot with jitter
lc_scatter(dat(
x = x,
y = y,
jitterX = 0.3,
size = 2.5
), "A1")
# simple function to scale a vector into unitary range
rescale <- function(x, min = 0, max = 1) {
(x - min(x)) / (max(x) - min(x)) * (max - min) + min
}
# generate random noise that is proportional to ker
shift <- unlist(tapply(y, x, function(points) { # for every group of points
d <- density(points) # calculate density distribution of y-values
runif(length(points), -0.3, 0.3) * # multiply random noise
rescale(approx(d$x, d$y, xout = points)$y) # by value from 0 to 1 proportional
# to density at this point
}))
# use generated noise as shift along x-axis
lc_scatter(dat(
x = x,
y = y,
shiftX = shift,
size = 2.5
), "A2")
toJSON(list(x = x, y = y, shift = shift))
library(jsonlite)
toJSON(list(x = x, y = y, shift = shift))
lc_scatter(dat(x = seq(1, 128, length.out = 20),
y = seq(1, 128, length.out = 20),
logScaleY = 2))
closePage()
lc_scatter(dat(x = seq(1, 128, length.out = 20),
y = seq(1, 128, length.out = 20),
logScaleY = 2))
seq(1, 128, length.out = 20)
x1 <- runif(40, 0, 10)
x2 <- runif(40, -5, 5)
lc_scatter(dat(
x = x1,
y = x1 * 3 + rnorm(40),
layerDomainX = c(3, 9),
domainY = c(0, 20)),
id = "chart")
lc_scatter(x = x2, y = -x2  + rnorm(40),
colour = "red",
id = "chart",
addLayer = T) # new scatter plot will be added as a new layer
lc_scatter(dat(
x = iris$Species,
y = iris$Sepal.Length,
jitterX = 0.2,
colourValue = iris$Petal.Length,
domainX = c("virginica", "something else", "setosa", "versicolor")
))
lc_scatter(x = 1:10, y = 1:10,
height = 200, # make the chart wide
aspectRatio = 1)
values <- iris$Sepal.Length
#add some NAs
values[sample(length(values), 10)] <- NA
values[is.na(values)] <- 3
lc_scatter(dat(
x = iris$Species,
y = values,
ticksY = cbind(3:8, c("NA", 4:8)),
ticksRotateX = 45,
axisTitleX = "species",
axisTitleY = "sepal length",
jitterX = 0.2,
size = 4,
colourValue = iris$Petal.Length
))
closePage()
lc_scatter(dat(
x = iris$Sepal.Length,
y = iris$Petal.Length,
colourValue = iris$Sepal.Width,
symbolValue = iris$Species,
showLegend = F,
showPanel = F,
width = 600,
height = 300,
paddings = list(left = 10)
))
pca <- prcomp(iris[, 1:4]) #get principle components
#fucntion that calculates a distance from a given pint to
#all other points
getDinstance <- function(p) {
sqrt(rowSums(t((t(iris[, 1:4]) - unlist(iris[p, 1:4])))^2))
}
selPoint <- 1
lc_scatter(dat(
x = pca$x[, 1],
y = pca$x[, 2],
colourValue = getDinstance(selPoint),
transitionDuration = 0,
on_mouseover = function(i) {
selPoint <<- i
updateCharts(updateOnly = "ElementStyle")
}
))
closePage()
pca <- prcomp(iris[, 1:4]) #get principle components
#fucntion that calculates a distance from a given pint to
#all other points
getDinstance <- function(p) {
sqrt(rowSums(t((t(iris[, 1:4]) - unlist(iris[p, 1:4])))^2))
}
selPoint <- 1
lc_scatter(dat(
x = pca$x[, 1],
y = pca$x[, 2],
colourValue = getDinstance(selPoint),
transitionDuration = 0,
on_mouseover = function(i) {
selPoint <<- i
updateCharts(updateOnly = "ElementStyle")
}
))
writeLines(toJSON(pca$x[, 1:2]))
?toJSON
toJSON(pca$x[, 1:2], matrix = "columnmajor")
writeLines(as.matrix(dist(iris[, 1:4])), "data.js")
writeLines(toJSON(as.matrix(dist(iris[, 1:4]))), "data.js")
colnames(iris)
setwd("~/Work/Git/linked-charts/docs/rlc/props")
knitr::knit("props.Rmd", "props.md")
knitr::knit("props.Rmd", "props.md")
knitr::knit("props.Rmd", "props.md")
knitr::knit("props.Rmd", "props.md")
library(ggplot2)
ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length, size = Sepal.Width * 2, colour = Petal.Width, shape = Species))
