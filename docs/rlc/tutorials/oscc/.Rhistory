})
plot(colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, sims[4, ])
mu <- 0.1
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
e4 <- rowMeans(sc^4)/cs^4
e3 <- rowMeans(sc^3)/cs^3
e2 <- rowMeans(sc^2)/cs^2
e1 <- rowMeans(sc)/cs
s1 <- sum(e4)
expand.grid(1:N, 1:N) %>%
filter(Var1 != Var2)
e1
expand.grid(1:N, 1:N) %>%
filter(Var1 != Var2) %>%
mutate(Var1 = e1[Var1], Var2 = e3[Var2])
ksi <- mean(1/cs)
plot(colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, sims[4, ])
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat), mean(var_hat^2))
})
plot(colSums(test_steps)/(N-1)^2, sims[5, ])
abline(a = 0, b = 1)
plot(sims[5, ] - mu_test^2 * ksi^2, sims[5, ])
plot(sims[5, ] - mu_test^2 * ksi^2, sims[4, ])
abline(a = 0, b = 1)
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
mu_hat
var_hat <- rowVars(t( sc / cs ))
var_hat
plot(density(var_hat))
colSums(sc^2/cs^2)
colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat), mean(var_hat^2), var_hat_2)
})
plot(sims[5, ], sims[6, ]/(N - 1)^2)
abline(a = 0, b = 1)
plot(colSums(test_steps)/(N-1)^2, sims[6, ])
abline(a = 0, b = 1)
plot(colSums(test_steps)/(N-1)^2, sims[6, ])
abline(a = 0, b = 1)
plot(sims[5, ] - mu_test^2 * ksi^2, sims[4, ])
abline(a = 0, b = 1)
str(sc)
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
s1 <- rep(0, nrow(sc))
s2 <- rep(0, nrow(sc))
s3 <- rep(0, nrow(sc))
for(j in 1:N) {
for(j1 in 1:N) {
s1 <- s1 + sc[j, ]^2 * sc[j1, ]^2 /cs[j]^2 / cs[j1]^2
for(j2 in 1:N) {
s3 <- s3 + sc[j, ]^2 * sc[j1, ] * sc[j2, ] /cs[j]^2 / cs[j1] / cs[j2]
for(j3 in 1:N)
s2 <- s2 + sc[j, ] * sc[j1, ] * sc[j2, ] * sc[j3, ] /cs[j] / cs[j1] / cs[j2] / cs[j3]
}
}
}
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat), mean(var_hat^2), var_hat_2, mean(s1) + mean(s2)/N^2 - 2/N*mean(s3))
})
source('~/Work/sim.R', echo=TRUE)
N <- length(cs)
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
#  s1 <- rep(0, nrow(sc))
#  s2 <- rep(0, nrow(sc))
#  s3 <- rep(0, nrow(sc))
#  for(j in 1:N) {
#    for(j1 in 1:N) {
#      s1 <- s1 + sc[j, ]^2 * sc[j1, ]^2 /cs[j]^2 / cs[j1]^2
#      for(j2 in 1:N) {
#        s3 <- s3 + sc[j, ]^2 * sc[j1, ] * sc[j2, ] /cs[j]^2 / cs[j1] / cs[j2]
#        for(j3 in 1:N)
#          s2 <- s2 + sc[j, ] * sc[j1, ] * sc[j2, ] * sc[j3, ] /cs[j] / cs[j1] / cs[j2] / cs[j3]
#      }
#    }
#  }
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat), mean(var_hat^2), var_hat_2)
})
mu_test <- seq(min(means), max(means), length.out = 300)
plot(mu_test, sims[1, ])
ksi <- mean(1/cs)
plot(mu_test * ksi / length(cs), sims[2, ] )
abline(a = 0, b = 1)
plot(mu_test * ksi, sims[3, ])
abline(a = 0, b = 1)
N <- length(cs)
ksi_2 <- sum(1/cs^2)
ksi_3 <- sum(1/cs^3)
library(tidyverse)
test_steps <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
e4 <- rowMeans(sc^4)/cs^4
e3 <- rowMeans(sc^3)/cs^3
e2 <- rowMeans(sc^2)/cs^2
e1 <- rowMeans(sc)/cs
s1 <- sum(e4)
expand.grid(1:N, 1:N) %>%
filter(Var1 != Var2) %>%
mutate(Var1 = e1[Var1], Var2 = e3[Var2]) -> s
s2 <- sum(s$Var1 * s$Var2)
expand.grid(1:N, 1:N) %>%
filter(Var1 != Var2) %>%
mutate(Var1 = e2[Var1], Var2 = e2[Var2]) -> s
s3 <- sum(s$Var1 * s$Var2)
expand.grid(1:N, 1:N, 1:N) %>%
filter(Var1 != Var2 & Var1 != Var3 & Var2 != Var3) %>%
mutate(Var1 = e2[Var1], Var2 = e1[Var2], Var3 = e2[Var3]) -> s
s4 <- sum(s$Var1 * s$Var2 *s$Var3)
s5 <- (N - 1) * (N - 2) * (N - 3) / N * mu^4
c((1 + 1/N^2 - 2/N)*s1, (4/N^2 - 4/N) * s2, (1 + 3/N^2 - 2/N) * s3, (6/N^2 - 2/N) * s4, s5)
})
plot(colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, sims[4, ])
plot(colSums(test_steps)/(N-1)^2, sims[6, ])
abline(a = 0, b = 1)
plot(sims[5, ] - mu_test^2 * ksi^2, sims[4, ])
abline(a = 0, b = 1)
plot(sims[5, ], sims[6, ]/(N - 1)^2)
abline(a = 0, b = 1)
plot(colSums(test_steps)/(N-1)^2, sims[5, ])
abline(a = 0, b = 1)
plot(colSums(test_steps)/(N-1)^2, sims[6, ])
abline(a = 0, b = 1)
plot(colSums(test_steps)/(N-1)^2, sims[6, ]/(N - 1)^2)
abline(a = 0, b = 1)
plot(colSums(test_steps)/(N-1)^2  - mu_test^2 * ksi^2, sims[6, ]/(N - 1)^2 - mu_test^2 * ksi^2)
plot(colSums(test_steps)/(N-1)^2  - mu_test^2 * ksi^2, sims[5, ] - mu_test^2 * ksi^2)
abline(a = 0, b = 1)
test_steps[1:5, 1:5]
test_steps[1:5, 95:100]
mu <- 0.1
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
rowMeans(sc^4)
rowMeans(sc^4)/cs^4
str(sc)
?rpois
rpois(length(cs), cs*mu[1:9])
plot(dens(sc[1, ]))
plot(density(sc[1, ]))
plot(density(rpois(4000, cs[10] * means[10])))
plot(density(sc[10, ]))
?rpois
mu <- means[10]
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(density(sc[10, ]))
lines(density(rpois(4000, cs[10] * means[10])), col = 2)
plot(test_steps[1, ]/(1 + 1/N^2 - 2/N),
mu_test*ksi_3 + 7 * mu_test^2 * ksi_2 + 6 * N * mu_test^2 * ksi + N*mu_test^4)
abline(a = 0, b = 1)
(1 + 1/N^2 - 2/N)
mu_test*ksi_3 + 7 * mu_test^2 * ksi_2 + 6 * N * mu_test^2 * ksi + N*mu_test^4
str(sc)
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- max(means)
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- 0
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- 0.1
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
max(means)
mu <- means[50]
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- means[10]
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- max(means)/2
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- max(means)/10
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- max(means)/100
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
mu <- mu_test[2]
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
plot(cs*mu + 3*cs^2 * mu^2 + cs^3 * mu^3, rowMeans(sc^3))
plot(colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, sims[4, ])
library(rlc)
lc_scatter(x = colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, y = sims[4, ], colourValue = mu_test)
closePage()
lc_scatter(dat(x = colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, y = sims[4, ], colourValue = mu_test))
plot(colSums(test_steps)/(N-1)^2 - mu_test^2 * ksi^2, sims[4, ])
abline(a = 0, b = 1)
cs <- colSums(rawCounts_RNA)
means <- rowMeans(normCounts)
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
#  s1 <- rep(0, nrow(sc))
#  s2 <- rep(0, nrow(sc))
#  s3 <- rep(0, nrow(sc))
#  for(j in 1:N) {
#    for(j1 in 1:N) {
#      s1 <- s1 + sc[j, ]^2 * sc[j1, ]^2 /cs[j]^2 / cs[j1]^2
#      for(j2 in 1:N) {
#        s3 <- s3 + sc[j, ]^2 * sc[j1, ] * sc[j2, ] /cs[j]^2 / cs[j1] / cs[j2]
#        for(j3 in 1:N)
#          s2 <- s2 + sc[j, ] * sc[j1, ] * sc[j2, ] * sc[j3, ] /cs[j] / cs[j1] / cs[j2] / cs[j3]
#      }
#    }
#  }
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat), mean(var_hat^2), var_hat_2)
})
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
#  var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
#  s1 <- rep(0, nrow(sc))
#  s2 <- rep(0, nrow(sc))
#  s3 <- rep(0, nrow(sc))
#  for(j in 1:N) {
#    for(j1 in 1:N) {
#      s1 <- s1 + sc[j, ]^2 * sc[j1, ]^2 /cs[j]^2 / cs[j1]^2
#      for(j2 in 1:N) {
#        s3 <- s3 + sc[j, ]^2 * sc[j1, ] * sc[j2, ] /cs[j]^2 / cs[j1] / cs[j2]
#        for(j3 in 1:N)
#          s2 <- s2 + sc[j, ] * sc[j1, ] * sc[j2, ] * sc[j3, ] /cs[j] / cs[j1] / cs[j2] / cs[j3]
#      }
#    }
#  }
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat))
})
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
#  var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
#  s1 <- rep(0, nrow(sc))
#  s2 <- rep(0, nrow(sc))
#  s3 <- rep(0, nrow(sc))
#  for(j in 1:N) {
#    for(j1 in 1:N) {
#      s1 <- s1 + sc[j, ]^2 * sc[j1, ]^2 /cs[j]^2 / cs[j1]^2
#      for(j2 in 1:N) {
#        s3 <- s3 + sc[j, ]^2 * sc[j1, ] * sc[j2, ] /cs[j]^2 / cs[j1] / cs[j2]
#        for(j3 in 1:N)
#          s2 <- s2 + sc[j, ] * sc[j1, ] * sc[j2, ] * sc[j3, ] /cs[j] / cs[j1] / cs[j2] / cs[j3]
#      }
#    }
#  }
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat))
})
mu_test <- seq(min(means), max(means), length.out = 300)
plot(mu_test, sims[1, ])
ksi <- mean(1/cs)
plot(mu_test * ksi / length(cs), sims[2, ] )
abline(a = 0, b = 1)
plot(mu_test * ksi, sims[3, ])
abline(a = 0, b = 1)
N <- length(cs)
ksi_2 <- sum(1/cs^2)
ksi_3 <- sum(1/cs^3)
est_var_var <- function(mu) {
(3/N) * mu^4 +
(9/N) * mu^3 * ksi +
(2/(N-1)^2) * mu^2 * ksi^2 +
(5*N^2 - 14 * N + 3)/N^2/(N - 1)^2 * mu^2 * ksi_2 +
1/N^2 * mu * ksi_3
}
plot(est_var_var(mu_test)/(N - 1)^2, sims[4, ])
plot(est_var_var(mu_test), sims[4, ])
sample(70, 1)
sample(3, 1)
sample(3, 1)
sample(68, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(66, 1)
sample(3, 1)
sample(64, 1)
sample(3, 1)
sample(62, 1)
sample(3, 1)
sample(60, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(58, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(12, 1)
sample(2, 1)
sample(2, 1)
sample(6, 1)
sample(58, 1)
sample(3, 1)
sample(56, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(54, 1)
sample(3, 1)
library(rlc)
data(iris)
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(x ~ y)
pred <- predict(fit, x, se.fit = T)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = y - 1.96 * pred$se.fit,
ymax = y + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), id = "ribbonTest")
debugonce(rlc:::setChart)
closePage()
lc_ribbon(dat(ymin = y - 1.96 * pred$se.fit,
ymax = y + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
debugonce(dataFun)
l
pred$se.fit
fit
closePage()
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), id = "ribbonTest")
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), size = 2, id = "ribbonTest")
lc_abLine(dat(a = fit$coefficients[2], b = fit$coefficients[1]))
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), size = 2, id = "ribbonTest")
lc_abLine(dat(a = fit$coefficients[2], b = fit$coefficients[1]), id = "ribbonTest")
closePage()
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), size = 2, id = "ribbonTest")
lc_abLine(dat(a = fit$coefficients[2], b = fit$coefficients[1]), id = "ribbonTest")
sample(20, 1)
sample(2, 1)
sample(6, 1)
sample(20, 1)
sample(2, 1)
sample(6, 1)
sample(20, 1)
load("~/Work/Git/linked-charts/docs/rlc/oscc/oscc.rda")
countMatrix_downsampled <-
countMatrix[ sample.int( nrow(countMatrix), 8000 ), ]
corrMat <- cor( countMatrix, method="spearman" )
library(rlc)
lc_heatmap(
dat(
value = corrMat
),
place = "A1"
)
closePage()
lc_heatmap(
dat(
value = corrMat
)
)
closePage()
openPage(F)
lc_heatmap(
dat(
value = corrMat
)
)
closePage()
install()
library(devtools)
install()
setwd("~/Work/Git/rlc/R")
install()
lc_heatmap(
dat(
value = corrMat
)
)
closePage()
debugonce(rlc:::sendProperties)
lc_heatmap(
dat(
value = corrMat
)
)
d
layer$dataFun(d)
toJSON(layer$dataFun(d))
writeLines(paste0("var heatmapData = ", toJSON(layer$dataFun(d)), ";"), "heatmapData.js")
closePage()
sampleNames <- rownames(corrMat)
geneNames <- colnames(countMatrix_downsampled)
geneNames <- rownames(countMatrix_downsampled)
toJSON(list(corrMat, countMatrix_downsampled, sampleNames, geneNames))
library(jsonlite)
toJSON(list(corrMat, countMatrix_downsampled, sampleNames, geneNames))
toJSON(list(corrMat = corrMat, countMatrix = countMatrix_downsampled,
sampleNames = sampleNames, geneNames = geneNames))
writeLines(paste0("var hData = ", toJSON(list(corrMat = corrMat, countMatrix = countMatrix_downsampled,
sampleNames = sampleNames, geneNames = geneNames)), ";"), "heatmapData.js")
library(knitr)
knit(output = "test.md")
setwd("~/Work/Git/linked-charts/docs/rlc/oscc")
knit(input = "oscc.Rmd", output = "test.md")
?toJSON
toJSON(c(1, 2, NA, 4))
toJSON(c(1, 2, NA, 4), na = "null")
toJSON(c(1, 2, NA, 4), na = "NaN")
toJSON(c(1, 2, NA, 4), na = "string")
toJSON(c(1, 2, NA, 4), .na = "NaN")
?lc_scatter
?lc_scatter
source('~/Work/somefun.R')
