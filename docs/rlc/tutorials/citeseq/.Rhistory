#      }
#    }
#  }
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat))
})
sims <- sapply(seq(min(means), max(means), length.out = 300), function(mu) {
sc <- sapply(1:4000, function(i) {
rpois(length(cs), cs*mu)
})
mu_hat <- colMeans( sc / cs )
var_hat <- rowVars(t( sc / cs ))
#  var_hat_2 <- mean((colSums(sc^2/cs^2) - 1/N * (colSums(sc/cs))^2)^2)
#  s1 <- rep(0, nrow(sc))
#  s2 <- rep(0, nrow(sc))
#  s3 <- rep(0, nrow(sc))
#  for(j in 1:N) {
#    for(j1 in 1:N) {
#      s1 <- s1 + sc[j, ]^2 * sc[j1, ]^2 /cs[j]^2 / cs[j1]^2
#      for(j2 in 1:N) {
#        s3 <- s3 + sc[j, ]^2 * sc[j1, ] * sc[j2, ] /cs[j]^2 / cs[j1] / cs[j2]
#        for(j3 in 1:N)
#          s2 <- s2 + sc[j, ] * sc[j1, ] * sc[j2, ] * sc[j3, ] /cs[j] / cs[j1] / cs[j2] / cs[j3]
#      }
#    }
#  }
c(mean(mu_hat), var(mu_hat), mean(var_hat), var(var_hat))
})
mu_test <- seq(min(means), max(means), length.out = 300)
plot(mu_test, sims[1, ])
ksi <- mean(1/cs)
plot(mu_test * ksi / length(cs), sims[2, ] )
abline(a = 0, b = 1)
plot(mu_test * ksi, sims[3, ])
abline(a = 0, b = 1)
N <- length(cs)
ksi_2 <- sum(1/cs^2)
ksi_3 <- sum(1/cs^3)
est_var_var <- function(mu) {
(3/N) * mu^4 +
(9/N) * mu^3 * ksi +
(2/(N-1)^2) * mu^2 * ksi^2 +
(5*N^2 - 14 * N + 3)/N^2/(N - 1)^2 * mu^2 * ksi_2 +
1/N^2 * mu * ksi_3
}
plot(est_var_var(mu_test)/(N - 1)^2, sims[4, ])
plot(est_var_var(mu_test), sims[4, ])
sample(70, 1)
sample(3, 1)
sample(3, 1)
sample(68, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(66, 1)
sample(3, 1)
sample(64, 1)
sample(3, 1)
sample(62, 1)
sample(3, 1)
sample(60, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(58, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(12, 1)
sample(2, 1)
sample(2, 1)
sample(6, 1)
sample(58, 1)
sample(3, 1)
sample(56, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(3, 1)
sample(54, 1)
sample(3, 1)
library(rlc)
data(iris)
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(x ~ y)
pred <- predict(fit, x, se.fit = T)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = y - 1.96 * pred$se.fit,
ymax = y + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), id = "ribbonTest")
debugonce(rlc:::setChart)
closePage()
lc_ribbon(dat(ymin = y - 1.96 * pred$se.fit,
ymax = y + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
debugonce(dataFun)
l
pred$se.fit
fit
closePage()
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), id = "ribbonTest")
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), size = 2, id = "ribbonTest")
lc_abLine(dat(a = fit$coefficients[2], b = fit$coefficients[1]))
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), size = 2, id = "ribbonTest")
lc_abLine(dat(a = fit$coefficients[2], b = fit$coefficients[1]), id = "ribbonTest")
closePage()
x <- seq(0, 5, 0.1, sd = 2)
y <- x*3 + rnorm(length(x))
plot(x, y)
fit <- lm(y ~ x)
pred <- predict(fit, data.frame(x = x), se.fit = T)
lc_ribbon(dat(ymin = pred$fit - 1.96 * pred$se.fit,
ymax = pred$fit + 1.96 * pred$se.fit,
x = x,
colour = "#555555"), id = "ribbonTest")
lc_scatter(dat(x = x, y = y), size = 2, id = "ribbonTest")
lc_abLine(dat(a = fit$coefficients[2], b = fit$coefficients[1]), id = "ribbonTest")
sample(20, 1)
sample(2, 1)
sample(6, 1)
sample(20, 1)
sample(2, 1)
sample(6, 1)
sample(20, 1)
setwd("~/Work/Git/linked-charts/docs/rlc/citeseq")
library( rlc )
# Load the prepared data. You can get this file from here:
# https://https://anders-biostat.github.io/linked-charts/rlc/citeseq/citeseq_data.rda
#download.file( "https://anders-biostat.github.io/linked-charts/rlc/citeseq/citeseq_data.rda", "citeseq_data.rda" )
load( "citeseq_data.rda" )
# threshold for variable genes
variableGenes <- vars / means > 1.5  &  means > 1e-3
openPage( layout = "table2x2", useViewer=FALSE )
gene <- "CD79A"
# the function to find genes high in the selected cells that
# writes its result to the table in B2
getHighGenes <- function(){
marked <- getMarked("B1")
# If no genes are marked, clear output, do nothing else
if( length(marked) == 0 ) {
return( "" )
}
df <- data.frame(
meanMarked   =  apply( countMatrix[ variableGenes,  marked ], 1, mean ),
sdMarked     =  apply( countMatrix[ variableGenes,  marked ], 1, sd ),
meanUnmarked =  apply( countMatrix[ variableGenes, -marked ], 1, mean ),
sdUnmarked   =  apply( countMatrix[ variableGenes, -marked ], 1, sd )
)
df$sepScore <- ( df$meanMarked - df$meanUnmarked ) / pmax( df$sdMarked + df$sdUnmarked, 0.002 )
df <- round(df * 100)/100
head( df[ order( df$sepScore, decreasing=TRUE ), ], 15 )
}
# the variance-mean overview plot (A1)
lc_scatter(
dat(
x = means,
y = vars / means,
logScaleX=10,
logScaleY=10,
size=2.5,
on_click = function(i) {
gene <<- names(means)[i]
updateCharts( c( "A2", "B1" ) )
} ),
"A1"
)
# the expression of the selected gene (A2)
lc_scatter(
dat(
x = sf,
y = countMatrix[ gene, ],
logScaleX = 10,
title = gene,
opacity = 0.2 ),
"A2"
)
# the t-SNE plot (B1)
lc_scatter(
dat(
x = tsne$Y[,1],
y = tsne$Y[,2],
colourValue = sqrt( countMatrix[ gene, ] / sf ),
palette = RColorBrewer::brewer.pal( 9, "YlOrRd" ),
size = 1,
on_marked = function() {
updateCharts("B2")
}),
"B1"
)
#table with the top significantly different genes
lc_html(dat(
content = getHighGenes() ),
"B2"
)
str(countMatrix)
tsne
#second tutorial
writeLines(paste0("var data = ", toJSON(list(countMatrix = countMatrix, geneNames = rownames(countMatrix),
cellNames = colnames(countMatrix), tsne = tsne$Y,
means = means, vars = vars, sf = sf, ";"))), "citeSeqData.js")
library(jsonlite)
#second tutorial
writeLines(paste0("var data = ", toJSON(list(countMatrix = countMatrix, geneNames = rownames(countMatrix),
cellNames = colnames(countMatrix), tsne = tsne$Y,
means = means, vars = vars, sf = sf, ";"))), "citeSeqData.js")
load("~/Work/Git/linked-charts/docs/rlc/oscc/oscc.rda")
# first tutorial
sampledGenes <- sample.int( nrow(countMatrix), 8000 )
countMatrix_downsampled <-
countMatrix[sampledGenes, ]
corrMat <- cor( countMatrix_downsampled, method="spearman" )
sampleNames <- rownames(corrMat)
geneNames <- rownames(countMatrix_downsampled)
library(jsonlite)
writeLines(paste0("var hData = ", toJSON(list(corrMat = corrMat, countMatrix = countMatrix_downsampled,
sampleNames = sampleNames, geneNames = geneNames)), ";"), "heatmapData.js")
voomResult_downsampled <- voomResult[sampledGenes, ]
rownames(voomResult) <- NULL
writeLines(paste0("var maData = ", toJSON(list(pvals = voomResult_downsampled,
patients = sampleTable$patient, tissue = sampleTable$tissue,
countSums = colSums(countMatrix_downsampled))),
";"), "maData.js")
setwd("../oscc")
# first tutorial
sampledGenes <- sample.int( nrow(countMatrix), 10000 )
countMatrix_downsampled <-
countMatrix[sampledGenes, ]
corrMat <- cor( countMatrix_downsampled, method="spearman" )
sampleNames <- rownames(corrMat)
geneNames <- rownames(countMatrix_downsampled)
library(jsonlite)
writeLines(paste0("var hData = ", toJSON(list(corrMat = corrMat, countMatrix = countMatrix_downsampled,
sampleNames = sampleNames, geneNames = geneNames)), ";"), "heatmapData.js")
voomResult_downsampled <- voomResult[sampledGenes, ]
rownames(voomResult) <- NULL
writeLines(paste0("var maData = ", toJSON(list(pvals = voomResult_downsampled,
patients = sampleTable$patient, tissue = sampleTable$tissue,
countSums = colSums(countMatrix_downsampled))),
";"), "maData.js")
load("~/Work/Git/linked-charts/docs/rlc/citeseq/citeseq_data.rda")
#second tutorial
sampledGenes <- sample.int(nrow(countMatrix), 5000)
sampledCells <- sample.int(ncol(countMatrix), 2000)
setwd("../citeseq")
writeLines(paste0("var data = ", toJSON(list(countMatrix = countMatrix[sampledGenes, sampledCells],
geneNames = rownames(countMatrix)[sampledGenes],
cellNames = colnames(countMatrix)[sampledCells], tsne = tsne$Y[sampledCells, ],
means = means[sampledGenes], vars = vars[sampledGenes], sf = sf[sampledCells], ";"))),
"citeSeqData.js")
# threshold for variable genes
variableGenes <- vars / means > 1.5  &  means > 1e-3
openPage( layout = "table2x2", useViewer=FALSE )
gene <- "CD79A"
# the function to find genes high in the selected cells that
# writes its result to the table in B2
getHighGenes <- function(){
marked <- getMarked("B1")
# If no genes are marked, clear output, do nothing else
if( length(marked) == 0 ) {
return( "" )
}
df <- data.frame(
meanMarked   =  apply( countMatrix[ variableGenes,  marked ], 1, mean ),
sdMarked     =  apply( countMatrix[ variableGenes,  marked ], 1, sd ),
meanUnmarked =  apply( countMatrix[ variableGenes, -marked ], 1, mean ),
sdUnmarked   =  apply( countMatrix[ variableGenes, -marked ], 1, sd )
)
df$sepScore <- ( df$meanMarked - df$meanUnmarked ) / pmax( df$sdMarked + df$sdUnmarked, 0.002 )
df <- round(df * 100)/100
head( df[ order( df$sepScore, decreasing=TRUE ), ], 15 )
}
# the variance-mean overview plot (A1)
lc_scatter(
dat(
x = means,
y = vars / means,
logScaleX=10,
logScaleY=10,
size=2.5,
on_click = function(i) {
gene <<- names(means)[i]
updateCharts( c( "A2", "B1" ) )
} ),
"A1"
)
# the expression of the selected gene (A2)
lc_scatter(
dat(
x = sf,
y = countMatrix[ gene, ],
logScaleX = 10,
title = gene,
opacity = 0.2 ),
"A2"
)
# the t-SNE plot (B1)
lc_scatter(
dat(
x = tsne$Y[,1],
y = tsne$Y[,2],
colourValue = sqrt( countMatrix[ gene, ] / sf ),
palette = RColorBrewer::brewer.pal( 9, "YlOrRd" ),
size = 1,
colourLegendTitle = gene,
on_marked = function() {
updateCharts("B2")
}),
"B1"
)
#table with the top significantly different genes
lc_html(dat(
content = getHighGenes() ),
"B2"
)
closePage()
setwd("~/Work/Git/rlc/R")
library(devtools)
install(])
install()
openPage( layout = "table2x2", useViewer=FALSE )
gene <- "CD79A"
# the function to find genes high in the selected cells that
# writes its result to the table in B2
getHighGenes <- function(){
marked <- getMarked("B1")
# If no genes are marked, clear output, do nothing else
if( length(marked) == 0 ) {
return( "" )
}
df <- data.frame(
meanMarked   =  apply( countMatrix[ variableGenes,  marked ], 1, mean ),
sdMarked     =  apply( countMatrix[ variableGenes,  marked ], 1, sd ),
meanUnmarked =  apply( countMatrix[ variableGenes, -marked ], 1, mean ),
sdUnmarked   =  apply( countMatrix[ variableGenes, -marked ], 1, sd )
)
df$sepScore <- ( df$meanMarked - df$meanUnmarked ) / pmax( df$sdMarked + df$sdUnmarked, 0.002 )
df <- round(df * 100)/100
head( df[ order( df$sepScore, decreasing=TRUE ), ], 15 )
}
# the variance-mean overview plot (A1)
lc_scatter(
dat(
x = means,
y = vars / means,
logScaleX=10,
logScaleY=10,
size=2.5,
on_click = function(i) {
gene <<- names(means)[i]
updateCharts( c( "A2", "B1" ) )
} ),
"A1"
)
# the expression of the selected gene (A2)
lc_scatter(
dat(
x = sf,
y = countMatrix[ gene, ],
logScaleX = 10,
title = gene,
opacity = 0.2 ),
"A2"
)
# the t-SNE plot (B1)
lc_scatter(
dat(
x = tsne$Y[,1],
y = tsne$Y[,2],
colourValue = sqrt( countMatrix[ gene, ] / sf ),
palette = RColorBrewer::brewer.pal( 9, "YlOrRd" ),
size = 1,
colourLegendTitle = gene,
on_marked = function() {
updateCharts("B2")
}),
"B1"
)
#table with the top significantly different genes
lc_html(dat(
content = getHighGenes() ),
"B2"
)
closePage()
install()
openPage( layout = "table2x2", useViewer=FALSE )
gene <- "CD79A"
# the function to find genes high in the selected cells that
# writes its result to the table in B2
getHighGenes <- function(){
marked <- getMarked("B1")
# If no genes are marked, clear output, do nothing else
if( length(marked) == 0 ) {
return( "" )
}
df <- data.frame(
meanMarked   =  apply( countMatrix[ variableGenes,  marked ], 1, mean ),
sdMarked     =  apply( countMatrix[ variableGenes,  marked ], 1, sd ),
meanUnmarked =  apply( countMatrix[ variableGenes, -marked ], 1, mean ),
sdUnmarked   =  apply( countMatrix[ variableGenes, -marked ], 1, sd )
)
df$sepScore <- ( df$meanMarked - df$meanUnmarked ) / pmax( df$sdMarked + df$sdUnmarked, 0.002 )
df <- round(df * 100)/100
head( df[ order( df$sepScore, decreasing=TRUE ), ], 15 )
}
# the variance-mean overview plot (A1)
lc_scatter(
dat(
x = means,
y = vars / means,
logScaleX=10,
logScaleY=10,
size=2.5,
on_click = function(i) {
gene <<- names(means)[i]
updateCharts( c( "A2", "B1" ) )
} ),
"A1"
)
# the expression of the selected gene (A2)
lc_scatter(
dat(
x = sf,
y = countMatrix[ gene, ],
logScaleX = 10,
title = gene,
opacity = 0.2 ),
"A2"
)
# the t-SNE plot (B1)
lc_scatter(
dat(
x = tsne$Y[,1],
y = tsne$Y[,2],
colourValue = sqrt( countMatrix[ gene, ] / sf ),
palette = RColorBrewer::brewer.pal( 9, "YlOrRd" ),
size = 1,
colourLegendTitle = gene,
on_marked = function() {
updateCharts("B2")
}),
"B1"
)
#table with the top significantly different genes
lc_html(dat(
content = getHighGenes() ),
"B2"
)
source('~/Work/somefun.R')
RColorBrewer::brewer.pal( 9, "YlOrRd" )
toJSON(RColorBrewer::brewer.pal( 9, "YlOrRd" ))
setwd("~/Work/Git/linked-charts/docs/rlc/citeseq")
sampledGenes <- sample.int(nrow(countMatrix), 6000)
sampledCells <- sample.int(ncol(countMatrix), 3000)
writeLines(paste0("var data = ", toJSON(list(countMatrix = countMatrix[sampledGenes, sampledCells],
geneNames = rownames(countMatrix)[sampledGenes],
cellNames = colnames(countMatrix)[sampledCells], tsne = tsne$Y[sampledCells, ],
means = means[sampledGenes], vars = vars[sampledGenes], sf = sf[sampledCells], ";"))),
"citeSeqData.js")
source('~/Work/somefun.R')
sampledGenes <- sample.int(nrow(countMatrix), 5000)
sampledCells <- sample.int(ncol(countMatrix), 3000)
writeLines(paste0("var data = ", toJSON(list(countMatrix = countMatrix[sampledGenes, sampledCells],
geneNames = rownames(countMatrix)[sampledGenes],
cellNames = colnames(countMatrix)[sampledCells], tsne = tsne$Y[sampledCells, ],
means = means[sampledGenes], vars = vars[sampledGenes], sf = sf[sampledCells], ";"))),
"citeSeqData.js")
sampledGenes <- sample.int(nrow(countMatrix), 5000)
sampledCells <- sample.int(ncol(countMatrix), 2000)
writeLines(paste0("var data = ", toJSON(list(countMatrix = countMatrix[sampledGenes, sampledCells],
geneNames = rownames(countMatrix)[sampledGenes],
cellNames = colnames(countMatrix)[sampledCells], tsne = tsne$Y[sampledCells, ],
means = means[sampledGenes], vars = vars[sampledGenes], sf = sf[sampledCells], ";"))),
"citeSeqData.js")
source('~/Work/somefun.R')
